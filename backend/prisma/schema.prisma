generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Provider {
  OPENAI
  DEEPSEEK
  GEMINI
  PERPLEXITY
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  name          String?
  passwordHash  String
  avatarUrl     String?
  settings      Settings?
  projects      Project[]
  folders       Folder[]
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Settings {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @unique @db.ObjectId
  defaultProvider  Provider @default(OPENAI)
  openaiKeyEnc     String?
  deepseekKeyEnc   String?
  geminiKeyEnc     String?
  perplexityKeyEnc String?
  user             User     @relation(fields: [userId], references: [id])
}

model Project {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  userId           String        @db.ObjectId
  name             String
  role             String?
  responsibilities String?
  description      String?
  files            ProjectFile[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id])
}

model ProjectFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @db.ObjectId
  filename  String
  mimetype  String
  path      String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
}

model Folder {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  name     String
  parentId String?
  user     User   @relation(fields: [userId], references: [id])
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  provider  Provider
  projectId String?
  title     String?
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  role           String
  content        String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}
